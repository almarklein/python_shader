trigger:
- master

variables:
  NAME: python-shader

jobs:
- job: Build
  strategy:
    matrix:
      Linux-py36-full:
        vmImage: ubuntu-16.04
        pyversion: '3.6'
        PYTHON_SHADER_TEST_FULL: true
      Linux-py37:
        vmImage: ubuntu-16.04
        pyversion: '3.7'
      Linux-py38:
        vmImage: ubuntu-16.04
        pyversion: '3.8'
      Linux-pypy3:
        vmImage: ubuntu-16.04
        pyversion: 'pypy3'
      MacOS-py36:
        vmImage: macOS-10.14
        MACOSX_DEPLOYMENT_TARGET: '10.13'
        pyversion: '3.6'
      MacOS-py38:
        vmImage: macOS-10.14
        MACOSX_DEPLOYMENT_TARGET: '10.13'
        pyversion: '3.8'
      Windows-py36:
        vmImage: vs2017-win2016
        pyversion: '3.6'
      Windows-py38:
        vmImage: vs2017-win2016
        pyversion: '3.8'
  pool:
    vmImage: $(vmImage)
  steps:
  - task: UsePythonVersion@0
    displayName: Select Python
    inputs:
      versionSpec: $(pyversion)
  - task: Bash@3
    displayName: Install basic development requirements
    inputs:
      targetType: inline
      script: |
        python -m pip install -U pip
        pip install -q -U pytest pytest-cov wgpu
  - task: Bash@3
    displayName: Install more development requirements
    condition: eq(variables['PYTHON_SHADER_TEST_FULL'], 'true')
    inputs:
      targetType: inline
      script: |
        pip install -q -U black flake8
        wget -qO - http://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo apt-key add -
        sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-1.1.130-xenial.list http://packages.lunarg.com/vulkan/1.1.130/lunarg-vulkan-1.1.130-xenial.list
        sudo apt update
        sudo apt install vulkan-sdk
  - task: Bash@3
    displayName: Lint (black)
    condition: eq(variables['PYTHON_SHADER_TEST_FULL'], 'true')
    inputs:
      targetType: inline
      script: |
        black --check .
  - task: Bash@3
    displayName: Lint (flake8)
    condition: eq(variables['PYTHON_SHADER_TEST_FULL'], 'true')
    inputs:
      targetType: inline
      script: |
        flake8
  - task: Bash@3
    displayName: Test (packaged)
    inputs:
      targetType: inline
      script: |
        python setup.py install
        rm -rf ./python_shader ./build ./egg-info
        pytest --disable-warnings --junit-xml=results-packaged.xml -v --cov=python_shader || true
        # Fail the task if results-packaged.xml was not created
        if [[ ! -f results-packaged.xml ]]
        then
          echo "##vso[task.logissue type=error]No test results were found"
          exit 1
        fi
  - task: PublishTestResults@2
    inputs:
      testResultsFiles: results-packaged.xml
      mergeTestResults: true
      failTaskOnFailedTests: true
      testRunTitle: Test $(vmImage) (packaged)
